import { PrincipiumConfig } from "./types";
import path from "node:path";
import { globbySync } from "globby";
import { readFileSync } from "node:fs";

/**
 * Find and load the JSON config via glob pattern.
 */
function loadConfig(pattern: string): PrincipiumConfig {
  const files = globbySync(pattern, { cwd: process.cwd() });
  if (!files.length) {
    console.error(`❌ No config file found for pattern: ${pattern}`);
    process.exit(1);
  }
  const fullPath = path.resolve(process.cwd(), files[0]);
  try {
    const raw = readFileSync(fullPath, "utf-8");
    return JSON.parse(raw) as PrincipiumConfig;
  } catch (err) {
    console.error(`❌ Failed to parse JSON at ${fullPath}:`, err);
    process.exit(1);
  }
}

/**
 * Generate CSS variables for all themes defined in config.
 */
function generateCss(cfg: PrincipiumConfig): string {
  const { defaultTheme, themes } = cfg;

  const REQUIRED_KEYS = [
    "background",
    "card",
    "border",
    "outline",
    "primary",
    "secondary",
    "muted",
    "success",
    "warning",
    "danger",
  ];

  // Validate theme keys
  for (const [themeName, themeCfg] of Object.entries(themes)) {
    const themeKeys = Object.keys(themeCfg.colors);
    const missing = REQUIRED_KEYS.filter((key) => !themeKeys.includes(key));
    const extra = themeKeys.filter((key) => !REQUIRED_KEYS.includes(key));
    if (missing.length || extra.length) {
      throw new Error(
        `Theme "${themeName}" is invalid.\n` +
          (missing.length ? `Missing: ${missing.join(", ")}\n` : "") +
          (extra.length ? `Unexpected: ${extra.join(", ")}` : "")
      );
    }
  }

  const LIGHTNESS: Record<string, string> = {
    "50": "95%",
    "100": "90%",
    "200": "80%",
    "300": "70%",
    "400": "60%",
    "500": "50%",
    "600": "40%",
    "700": "30%",
    "800": "20%",
    "900": "10%",
  };
  const LIGHTNESS_DARK: Record<string, string> = {
    "50": "10%",
    "100": "20%",
    "200": "30%",
    "300": "40%",
    "400": "50%",
    "500": "60%",
    "600": "70%",
    "700": "80%",
    "800": "90%",
    "900": "95%",
  };

  const scopes: { selector: string; lines: string[] }[] = [];
  const themeColors = new Set<string>();
  const customVariants: string[] = [];

  for (const [themeName, themeCfg] of Object.entries(themes)) {
    const selector = themeName === defaultTheme ? ":root" : `.${themeName}`;
    const { isDarkTheme, colors } = themeCfg;
    const lines: string[] = [];

    const lightnessEntries = isDarkTheme
      ? Object.entries(LIGHTNESS_DARK)
      : Object.entries(LIGHTNESS);

    for (const [
      colorName,
      {
        h,
        s,
        light: { base: baseL, fg: fgL },
      },
    ] of Object.entries(colors)) {
      // Add base Color
      themeColors.add(colorName);

      // shade variables
      for (const [shade, light] of lightnessEntries) {
        // Add shade color
        themeColors.add(`${colorName}-${shade}`);
        lines.push(`  --${colorName}-${shade}: hsl(${h} ${s} ${light});`);
      }

      // base variable
      lines.push(`  --${colorName}: hsl(${h} ${s} ${baseL});`);

      // foreground variable
      const fgName =
        colorName === "background" ? "foreground" : `${colorName}-foreground`;
      // Add foreground color
      themeColors.add(fgName);
      lines.push(`  --${fgName}: hsl(${h} ${s} ${fgL});`);
    }

    scopes.push({ selector, lines });

    // Add custom variant
    if (themeName !== defaultTheme) {
      customVariants.push(
        `@custom-variant ${themeName} (&:is(.${themeName} *));`
      );
    }
  }

  // Generate @theme inline {}
  const themeInline: string[] = ["@theme inline {"];
  for (const color of themeColors) {
    themeInline.push(`  --color-${color}: var(--${color});`);
  }
  themeInline.push("}");

  // Final join
  const finalCss =
    `/* Auto-generated by principium-cli */\n\n` +
    customVariants.join("\n") +
    "\n\n" +
    themeInline.join("\n") +
    "\n\n" +
    scopes
      .map(({ selector, lines }) => `${selector} {\n${lines.join("\n")}\n}`)
      .join("\n\n");

  return finalCss;
}

export { loadConfig, generateCss };
