import { PrincipiumConfig } from './types';
import path from 'node:path';
import { globbySync } from 'globby';
import { readFileSync } from 'node:fs';

/**
 * Find and load the JSON config via glob pattern.
 */
function loadConfig(pattern: string): PrincipiumConfig {
  const files = globbySync(pattern, { cwd: process.cwd() });
  if (!files.length) {
    console.error(`❌ No config file found for pattern: ${pattern}`);
    process.exit(1);
  }
  const fullPath = path.resolve(process.cwd(), files[0]);
  try {
    const raw = readFileSync(fullPath, 'utf-8');
    return JSON.parse(raw) as PrincipiumConfig;
  } catch (err) {
    console.error(`❌ Failed to parse JSON at ${fullPath}:`, err);
    process.exit(1);
  }
}

/**
 * Generate CSS variables for all themes defined in config.
 */
function generateCss(cfg: PrincipiumConfig): string {
  const { defaultTheme, themes } = cfg;

  const LIGHTNESS: Record<string, string> = {
    '50': '95%',
    '100': '90%',
    '200': '80%',
    '300': '70%',
    '400': '60%',
    '500': '50%',
    '600': '40%',
    '700': '30%',
    '800': '20%',
    '900': '10%',
    '950': '5%',
  };

  const LIGHTNESS_DARK: Record<string, string> = {
    '50': '5%',
    '100': '10%',
    '200': '20%',
    '300': '30%',
    '400': '40%',
    '500': '50%',
    '600': '60%',
    '700': '70%',
    '800': '80%',
    '900': '90%',
    '950': '95%',
  };

  const scopes: { selector: string; lines: string[] }[] = [];
  const themeColors = new Set<string>();
  const customVariants: string[] = [];

  for (const [themeName, themeCfg] of Object.entries(themes)) {
    const selector = themeName === defaultTheme ? ':root' : `.${themeName}`;
    const { inverted = false, colors } = themeCfg;
    const lines: string[] = [];

    const lightnessEntries = inverted
      ? Object.entries(LIGHTNESS_DARK)
      : Object.entries(LIGHTNESS);

    for (const [colorName, { hue, saturation }] of Object.entries(colors)) {
      for (const [shade, light] of lightnessEntries) {
        themeColors.add(`${colorName}-${shade}`);
        lines.push(`  --${colorName}-${shade}: hsl(${hue} ${saturation} ${light});`);
      }
    }

    scopes.push({ selector, lines });

    // Add custom variant
    if (themeName !== defaultTheme && inverted) {
      customVariants.push(`@custom-variant dark (&:is(.${themeName} *));`);
    }
  }

  // Generate @theme inline {}
  const themeInline: string[] = ['@theme inline {'];
  themeInline.push(' --text-tiny: 0.625rem; ');
  for (const color of themeColors) {
    themeInline.push(`  --color-${color}: var(--${color});`);
  }
  themeInline.push('}');

  // Final join
  const finalCss =
    `/* Auto-generated by principium-cli */\n\n` +
    customVariants.join('\n') +
    '\n\n' +
    themeInline.join('\n') +
    '\n\n' +
    scopes
      .map(({ selector, lines }) => `${selector} {\n${lines.join('\n')}\n}`)
      .join('\n\n');

  return finalCss;
}

export { loadConfig, generateCss };
